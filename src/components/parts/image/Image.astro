---
import type { GetImageResult, ImageMetadata } from 'astro';
import { getImage, type LocalImageProps } from 'astro:assets';

type Props = Omit<LocalImageProps, 'src'> &
  (
    | {
        src: ImageMetadata;
        src2x?: never;
      }
    | {
        src?: never;
        src2x: ImageMetadata;
      }
  );

const { src, src2x, alt, loading = 'lazy', decoding = 'auto', ...attrs } = Astro.props;

// attrsに`data-astro-cid-*`が含まれているため、異なるコンポーネント間で使用すると同じ画像でも重複生成されてしまう問題を回避
// astro 3.1.1では、標準のImageコンポーネントでも同様の問題が発生する
const attrsPickAstroCid = Object.fromEntries(
  Object.entries(attrs).filter(([key]) => key.indexOf('data-astro-cid-') === 0)
);
const attrsWithoutAstroCid = Object.fromEntries(
  Object.entries(attrs).filter(([key]) => key.indexOf('data-astro-cid-') !== 0)
);

let img1x: GetImageResult | null = null;
let img2x: GetImageResult | null = null;

if (src && !src2x) {
  img1x = await getImage({ src, quality: 'max', ...attrsWithoutAstroCid });
} else if (!src && src2x) {
  img2x = await getImage({ src: src2x, quality: 'max', ...attrsWithoutAstroCid });
  img1x = await getImage({
    src: src2x,
    width: Math.ceil(img2x.attributes.width / 2),
    quality: 'max',
    ...attrsWithoutAstroCid,
  });
} else {
  throw new Error('Either `src` or `src2x` must be provided, but not both.');
}

const attributes = {
  ...attrsPickAstroCid,
  ...img1x.attributes,
  width: Math.ceil(img1x.attributes.width),
  height: Math.ceil(img1x.attributes.height),
  loading,
  decoding,
};
---

<>
  {src && <img src={img1x.src} alt={alt} {...attributes} />}
  {
    src2x && img1x && img2x && (
      <img src={img1x.src} srcset={`${img1x.src} 1x, ${img2x.src} 2x`} alt={alt} {...attributes} />
    )
  }
</>
