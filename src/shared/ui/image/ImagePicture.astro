---
import type { UnresolvedImageTransform } from 'astro';
import type { HTMLAttributes } from 'astro/types';
import type { LocalImageProps } from 'astro:assets';
import { getImage } from 'astro:assets';

import { BREAKPOINT_KEYS, BREAKPOINTS, PRINT_MIN_WIDTH } from '@/shared/consts/breakpoint';

import { getImageMetadata, getMaxDensity, isSvgImage } from './utils';

type Image = Omit<LocalImageProps, 'src' | 'alt'> & {
  src: LocalImageProps['src'] | string;
  alt?: string;
};

type Source = Pick<LocalImageProps, 'width' | 'height' | 'densities' | 'quality'> & {
  src: LocalImageProps['src'] | string;
  media: string;
};

type Props = Image & {
  sources: Source | Source[];
};

const { sources, ...imgProps } = Astro.props;
const sourcesArray = Array.isArray(sources) ? sources : [sources];
sourcesArray.reverse();

const imgImage = await (async () => {
  const isSvg = await isSvgImage(imgProps.src);

  imgProps.alt = imgProps.alt ?? '';
  imgProps.densities = isSvg ? undefined : (imgProps.densities ?? [1, 2]);
  imgProps.src = await getImageMetadata(imgProps.src);
  imgProps.width = Math.floor(imgProps.src.width / getMaxDensity(imgProps.densities));
  imgProps.quality = imgProps.quality ?? 'max';

  const image = await getImage(imgProps as UnresolvedImageTransform);
  const attrs: HTMLAttributes<'img'> = {};

  if (image.srcSet.values.length > 0) {
    attrs.srcset = image.srcSet.attribute;
  }

  return { src: image.src, attributes: { ...image.attributes, ...attrs } };
})();

const sourceImages = await Promise.all(
  sourcesArray.map(async (sourceProps) => {
    const isSvg = await isSvgImage(sourceProps.src);

    sourceProps.densities = isSvg ? undefined : (sourceProps.densities ?? [1, 2]);
    sourceProps.src = await getImageMetadata(sourceProps.src);
    sourceProps.width = Math.floor(sourceProps.src.width / getMaxDensity(sourceProps.densities));
    sourceProps.quality = sourceProps.quality ?? 'max';

    const image = await getImage(sourceProps as UnresolvedImageTransform);
    const attrs: HTMLAttributes<'source'> = {};

    if (image.srcSet.values.length > 0) {
      attrs.srcset = image.srcSet.attribute;
    }

    attrs.srcset = attrs.srcset == null ? image.src : [image.src, attrs.srcset].join(', ');
    if (BREAKPOINT_KEYS.includes(sourceProps.media)) {
      if (PRINT_MIN_WIDTH !== 'false' && parseInt(PRINT_MIN_WIDTH) <= parseInt(BREAKPOINTS[sourceProps.media])) {
        attrs.media = `print, (min-width: ${BREAKPOINTS[sourceProps.media]})`;
      } else {
        attrs.media = `(min-width: ${BREAKPOINTS[sourceProps.media]})`;
      }
    } else {
      attrs.media = sourceProps.media;
    }

    return {
      srcset: attrs.srcset,
      width: image.attributes.width,
      height: image.attributes.height,
      media: attrs.media,
    };
  })
);
---

<picture>
  {sourceImages.map((attrs) => <source {...attrs} />)}
  <img src={imgImage.src} {...imgImage.attributes} />
</picture>
